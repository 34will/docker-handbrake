#!/usr/bin/with-contenv sh

set -u # Treat unset variables as an error.

# Make sure we appear with a proper name under `ps`.
if [ ! -L "$0" ]; then
    ln -s run "$(dirname "$0")/autovideoconverter"
    exec "$(dirname "$0")/autovideoconverter" "$@"
fi

AUTOMATED_CONVERSION_PRESET="${AUTOMATED_CONVERSION_PRESET:-Very Fast 1080p30}"
AUTOMATED_CONVERSION_FORMAT="${AUTOMATED_CONVERSION_FORMAT:-mp4}"
AUTOMATED_CONVERSION_SOURCE_STABLE_TIME="${AUTOMATED_CONVERSION_SOURCE_STABLE_TIME:-5}"

FAILED_CONVERSIONS="/config/failed_conversions"
SUCCESSFUL_CONVERSIONS="/config/successful_conversions"

HANDBRAKE_CLI="$APP_NICE_CMD s6-setuidgid $USER_ID:$GROUP_ID /usr/bin/HandBrakeCLI --preset-import-file /config/ghb/presets.json"

WATCHDIR_HASH=UNSET

log() {
    echo "autoVideoConverter: $*"
}

WATCHDIR_HASH_calculate() {
    find /watch -follow -type f -printf '%T@:%s:%p\n' | md5sum | cut -d' ' -f1
}

WATCHDIR_HASH_isset() {
    [ "$WATCHDIR_HASH" != "UNSET" ]
}

WATCHDIR_HASH_update() {
    WATCHDIR_HASH="$(WATCHDIR_HASH_calculate)"
}

WATCHDIR_HASH_changed() {
    [ "$WATCHDIR_HASH" != "$(WATCHDIR_HASH_calculate)" ]
}

get_hash() {
    file="$1"
    stat -c '%n %s %Y' "$file" | md5sum | cut -d' ' -f1
}

process_file() {
    file="$1"

    # Skip file if it doesn't exists (may have been removed while processing
    # the watch directory).
    if [ ! -f "$file" ]; then
        log "Skipping file '$file': no longer exists."
        return
    fi

    # Get hash of the file from its properties.
    hash="$(get_hash "$file")"

    # Skip file if it has been already successfully processed.
    if grep -q -w "$hash" "$SUCCESSFUL_CONVERSIONS"; then
        log "Skipping file '$file' ($hash): already processed successfully."
        return
    fi

    # Skip file if we already failed to process it.
    if grep -q -w "$hash" "$FAILED_CONVERSIONS"; then
        log "Skipping file '$file' ($hash): already processed with failure."
        return
    fi

    # Skip file if it is not stable.
    log "Waiting $AUTOMATED_CONVERSION_SOURCE_STABLE_TIME seconds before processing '$file'..."
    sleep $AUTOMATED_CONVERSION_SOURCE_STABLE_TIME
    if [ "$hash" != "$(get_hash "$file")" ]; then
        log "Skipping file '$file': currently being copied."
        return
    fi

    log "Starting conversion of '$file' ($hash)..."
    case "${AUTOMATED_CONVERSION_OUTPUT_SUBDIR:-UNSET}" in
        UNSET)
            OUTPUT_DIR="/output"
            ;;
        SAME_AS_SRC)
            dirname="$(dirname "$file" | sed 's|^/watch||')"
            OUTPUT_DIR="/output/$dirname"
            ;;
        *)
            OUTPUT_DIR="/output/$AUTOMATED_CONVERSION_OUTPUT_SUBDIR"
            ;;
    esac
    OUTPUT_DIR="$(echo "$OUTPUT_DIR" | sed 's|/\+|/|g' | sed 's|/\+$||')"
    s6-setuidgid $USER_ID:$GROUP_ID mkdir -p "$OUTPUT_DIR"
    basename="$(basename "$file" | sed 's/\.[^.]*$//')"
    OUTPUT_FILE="$OUTPUT_DIR/$basename.$AUTOMATED_CONVERSION_FORMAT"
    $HANDBRAKE_CLI -i "$file" \
                   -o "$OUTPUT_FILE" \
                   --preset "$AUTOMATED_CONVERSION_PRESET"
    hb_rc=$?
    if [ $hb_rc -eq 0 ]; then
        log "Conversion ended successfully."
        echo "$file $hash" >> "$SUCCESSFUL_CONVERSIONS"
        if [ "${AUTOMATED_CONVERSION_KEEP_SOURCE:-1}" -eq 0 ]; then
            rm "$file"
            log "Removed file '$file'."
        fi
    else
        log "Conversion failed."
        echo "$file $hash" >> "$FAILED_CONVERSIONS"
    fi

    # Call post conversion hook.
    if [ -f /config/hooks/post_conversion.sh ]; then
        log "Executing post-conversion hook..."
        /usr/bin/with-contenv sh /config/hooks/post_conversion.sh $hb_rc "$OUTPUT_FILE"
        log "Post-conversion hook exited with $?"
    fi
}

echo "Starting Automatic Video Converter service..."

[ -f "$FAILED_CONVERSIONS" ] || touch "$FAILED_CONVERSIONS"
[ -f "$SUCCESSFUL_CONVERSIONS" ] || touch "$SUCCESSFUL_CONVERSIONS"

while true; do
    if WATCHDIR_HASH_changed; then
        if WATCHDIR_HASH_isset; then
            log "Change detected in watch folder"
        fi
        # Make sure to update the watch directory hash before processing it.
        # This is to make sure we catch, on the next round, changes occuring
        # during the processing.
        WATCHDIR_HASH_update
        log "Processing watch folder..."  
        FILELIST="$(mktemp)"
        find /watch -follow -type f > "$FILELIST"
        while read -u 3 FILE
        do
            process_file "$FILE"
        done 3<"$FILELIST"
        rm "$FILELIST"
        log "Watch folder processing terminated."

        # Remove empty directories.
        if [ "${AUTOMATED_CONVERSION_KEEP_SOURCE:-1}" -eq 0 ]; then
            find /watch/ -mindepth 1 -type d -empty -delete
        fi
    fi

    sleep 5
done

# vim: set ft=sh :
